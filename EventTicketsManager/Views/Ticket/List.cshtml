@using Library.Enums
@model TicketListModel

@{
    ViewData["Title"] = "Liste des billets";
    var i = 1;
}

<h1>Liste des billets</h1>

<div style="display: flex">
    <p>
        @Html.ActionLink("Créer un billet", "Create", new { id = Model.Event.Id }, new { @class = "btn btn-primary" })
    </p>

    <!-- Barre de recherche -->
    <div class="form-inline mb-3 ml-2">
        <input type="text" id="searchInput" class="form-control mr-2" placeholder="Rechercher dans le tableau..." />
    </div>
</div>

@if (Model.IsError())
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @Model.Error
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}

<table class="table table-striped" id="ticketTable">
    <thead>
    <tr>
    <tr>
        <th data-sort="number">N°</th>
        <th data-sort="text">Prénom</th>
        <th data-sort="text">Nom</th>
        <th data-sort="text">Email</th>
        <th data-sort="text">Genre</th>
        <th data-sort="text">A payé</th>
        <th data-sort="text">Moyen de paiement</th>
        <th data-sort="number">Mails envoyés</th>
        <th data-sort="text">Actions</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var item in Model.Tickets)
    {
        <tr>
            <td>@(i++)</td>
            <td>
                @Html.DisplayFor(modelItem => item.FirstName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.LastName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Email)
            </td>
            <td>
                @(((Gender)item.Gender).ToString())
            </td>
            <td>
                <span class="badge @(item.HasPaid ? "badge-success" : "badge-danger")">
                    @(item.HasPaid ? "Oui" : "Non")
                </span>
            </td>
            <td>
                @(((PaymentMethod)item.PaymentMethod).ToString())
            </td>
            <td>
                @(Model.TicketMailCounts.TryGetValue(item.Id, out var mailCount) ? mailCount : 0)
            </td>
            <td>
                @if (!item.HasPaid)
                {
                    <form asp-action="MarkAsPaid" method="post" style="display: inline;">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="id" value="@item.Id" />
                        <button type="submit" class="btn btn-warning mr-2">A payé</button>
                    </form>
                }
                
                @Html.ActionLink("Afficher", "Details", new { id = item.Id }, new { @class = "btn btn-info" })
            </td>
        </tr>
    }
    </tbody>
</table>

<script>
    document.getElementById("searchInput").addEventListener("keyup", function () {
        const searchValue = this.value.toLowerCase();
        const rows = document.querySelectorAll("#ticketTable tbody tr");

        rows.forEach(function (row) {
            var rowText = row.textContent.toLowerCase();

            if (rowText.includes(searchValue)) {
                row.style.display = "";
            } else {
                row.style.display = "none";
            }
        });
    });
</script>

<script>
    document.querySelectorAll("#ticketTable th").forEach(header => {
        header.addEventListener("click", function () {
            const table = header.parentElement.parentElement.parentElement;
            const tbody = table.querySelector("tbody");
            const rows = Array.from(tbody.querySelectorAll("tr"));
            const index = Array.from(header.parentElement.children).indexOf(header);
            const type = header.getAttribute("data-sort");
            const isAscending = header.classList.contains("asc");

            rows.sort((a, b) => {
                const cellA = a.children[index].innerText.trim();
                const cellB = b.children[index].innerText.trim();

                if (type === "number") {
                    return isAscending ? cellA - cellB : cellB - cellA;
                } else {
                    return isAscending ? cellA.localeCompare(cellB) : cellB.localeCompare(cellA);
                }
            });

            tbody.innerHTML = "";
            rows.forEach(row => tbody.appendChild(row));

            document.querySelectorAll("#ticketTable th").forEach(th => th.classList.remove("asc", "desc"));
            header.classList.toggle("asc", !isAscending);
            header.classList.toggle("desc", isAscending);
        });
    });
</script>
